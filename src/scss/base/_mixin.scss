// This file contains reusable mixins for consistent styling across the web application.
// These mixins are helper APIs that can help in some aspects, one of which is that it can
// help defining some properties with vendor prefixes versions to an element or rule easily.
//
// Written by Ryuu Mitsuki.
//
// Copyright (c) 2023 CV. DR2E.
// Licensed under the MIT License.
//

@use 'global';

/// Defines transitions with support for old browsers using vendor prefixes.
///
/// This helper mixin sets the `transition` properties and supports older browsers by
/// adding necessary vendor prefixes. It allows customization of `transition`
/// properties such as **property**, **duration**, and **timing** function.
/// Additional styles specific to the caller can be included using `@content`.
///
/// @param {String} $property [all]
///     The CSS property to transition (e.g., `transform`). If not specified,
///     use the default value `all` instead.
/// @param {Number (with unit) | List[Number (with unit)]} $durations
///     The duration of the transition (e.g., `0.3s 0.15s`).
/// @param {String} $timing [linear]
///     The timing function for the transition (e.g., `ease-in`).
/// @param {String | List[String]} $vendors [global.$vendor-prefixes]
///     A list of vendor prefixes for compatibility on old browsers.
///
/// @example - scss Without Keyword Arguments
///   .my-element {
///       @include mtransition(background, 0.3s 0.1s, ease) {
///           // Additional styles specific to `.my-element`
///       }
///   }
///
/// @example - scss With Keyword Arguments
///   .my-element {
///       @include mtransition(
///           $property: background,
///           $durations: 0.3s 0.1s,
///           $timing: ease
///       ) {
///           // Additional styles specific to `.my-element`
///       }
///   }
///
/// @require {variable} vendor-prefixes
/// @output  Sets the `transition` properties with vendor prefixes.
/// ```css
/// .my-element {
///     transition: background 0.3s 0.1s ease;
///     -webkit-transition: background 0.3s 0.1s ease;
///     -moz-transition: background 0.3s 0.1s ease;
///     -o-transition: background 0.3s 0.1s ease;
/// }
/// ```
///
/// @content Additional styles specific to the caller.
///
/// @group   helpers
/// @author  Ryuu Mitsuki `<github@mitsuki31>`
/// @since   0.1.0
///
@mixin mtransition($property: all, $durations,
                   $timing: linear, $vendors: global.$vendor-prefixes) {
    // Check whether the caller is have parent rules,
    // i.e., not being called from the outside.
    @if & {
        transition: $property $durations $timing;
        
        // Use vendor prefixes from global to define transition style
        // for old browsers
        @each $pre in $vendors {
            #{$pre}-transition: $property $durations $timing;
        }
        
        @content;
    }
}

/// This mixin provides a convenient way to apply transitions to all specified properties.  
/// For more detailed about the arguments, consider refer to
/// [`mtransition`](#helpers-mixin-mtransition) mixin.
///
/// @param {List[*]} $args
///     List containing transition properties.
///
/// @example - scss
///   $foo-transition: width 0.5s 0.15s ease-in-out;
///   .foo {
///       @include mtransition-all($foo-transition);
///   }
///
/// @require {variable} vendor-prefixes
/// @output  Sets the `transition` properties with vendor prefixes.
///
/// @group   helpers
/// @author  Ryuu Mitsuki `<github@mitsuki31>`
/// @since   0.1.0
///
@mixin mtransition-all($args...) {
    @if & {
        transition: $args;
        
        @each $pre in global.$vendor-prefixes {
            #{$pre}-transition: $args;
        }
    }
}

/// Applies `transform` property and its vendor-prefixed versions.
///
/// This mixin applies the `transform` property and its vendor-prefixed versions
/// for compatibility across different browsers. It allows developers to define
/// custom transformation functions or values.
///
/// @param {List[String] | String} $args [none]
///     The transformation properties value or function to apply. Default is `none`.
/// @param {List[String]} $vendors [$vendor-prefixes]
///     A list of vendor prefixes for compatibility.
///
/// @example - scss
///   div {
///       @include mtransform(rotateX(35deg) rotateY(35deg));
///   }
///
/// @require {variable} vendor-prefixes
/// @output  Sets the `transform` properties with vendor prefixes.
/// ```css
/// div {
///     transform: rotateX(35deg) rotateY(35deg);
///     -webkit-transform: rotateX(35deg) rotateY(35deg);
///     -moz-transform: rotateX(35deg) rotateY(35deg);
///     -o-transform: rotateX(35deg) rotateY(35deg);
/// }
/// ```
///
/// @group   helpers
/// @author  Ryuu Mitsuki `<github@mitsuki31>`
/// @since   0.1.0
///
@mixin mtransform($args: none, $vendors: global.$vendor-prefixes) {
    // Check whether the caller is have parent rules
    @if & {
        transform: $args;
        
        // Define transform properties for old browsers
        @each $pre in $vendors {
            #{$pre}-transform: $args;
        }
    }
}

/// Applies a box shadow property for the element with optional vendor prefixes.
///
/// This mixin generates a box shadow effect for the element it is applied to.
/// It includes the standard box shadow property and its vendor-prefixed versions
/// for compatibility with various old browsers.
///
/// @param {String} $args
///     The box shadow value including **horizontal** and **vertical offsets**,
///     **blur radius**, **spread radius**, and **color**.
/// @param {List} $vendors [global.$vendor-prefixes]
///     Optional list of vendor prefixes for browser compatibility.
///
/// @example - scss
///   .bar {
///       @include mbox-shadow(2px 2px 4px 2px rgba(0, 0, 0, 0.2));
///   }
///
/// @example - scss
///   $shadow: 2px 2px 4px 2px rgba(0, 0, 0, 0.2);
///   // It also accepts arguments from a variable
///   .bar {
///       @include mbox-shadow($shadow);
///   }
///
/// @require {variable} vendor-prefixes
/// @output  Sets the `box-shadow` properties with vendor prefixes.
/// ```css
/// .bar {
///     box-shadow: 2px 2px 4px 2px rgba(0, 0, 0, 0.2);
///     -webkit-box-shadow: 2px 2px 4px 2px rgba(0, 0, 0, 0.2);
///     -moz-box-shadow: 2px 2px 4px 2px rgba(0, 0, 0, 0.2);
///     -o-box-shadow: 2px 2px 4px 2px rgba(0, 0, 0, 0.2);
/// }
/// ```
///
/// @group   helpers
/// @author  Ryuu Mitsuki `<github@mitsuki31>`
/// @since   0.1.0
///
@mixin mbox-shadow($args, $vendors: global.$vendor-prefixes) {
    @if & {
        box-shadow: $args;
        
        @each $pre in $vendors {
            #{$pre}-box-shadow: $args;
        }
    }
}
