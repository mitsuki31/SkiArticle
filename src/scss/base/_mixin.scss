// This file contains reusable mixins for consistent styling across the application.
//
// Written and converted by Ryuu Mitsuki.
//
// Copyright (c) 2023 CV. DR2E.
// Licensed under the MIT License.
//

@use 'global';

/// Defines transitions with support for old browsers using vendor prefixes.
///
/// This helper mixin sets the `transition` properties and supports older browsers by
/// adding necessary vendor prefixes. It allows customization of `transition`
/// properties such as **property**, **duration**, and **timing** function.
/// Additional styles specific to the caller can be included using `@content`.
///
/// @param {String} $property [all]
///     The CSS property to transition (e.g., `transform`). If not specified,
///     use the default value `all` instead.
/// @param {Number (with unit) | List[Number (with unit)]} $durations
///     The duration of the transition (e.g., `0.3s 0.15s`).
/// @param {String} $timing [linear]
///     The timing function for the transition (e.g., `ease-in`).
/// @param {String | List[String]} $vendors [$vendor-prefixes]
///     A list of vendor prefixes for old browsers.
///
/// @example - scss Without Keyword Arguments
///   .my-element {
///       @include mtransition(background, 0.3s 0.1s, ease) {
///           // Additional styles specific to `.my-element`
///       }
///   }
///
/// @example - scss With Keyword Arguments
///   .my-element {
///       @include mtransition(
///           $property: background,
///           $durations: 0.3s 0.1s,
///           $timing: ease
///       ) {
///           // Additional styles specific to `.my-element`
///       }
///   }
///
/// @require {variable} vendor-prefixes
/// @output  Sets the `transition` properties with vendor prefixes.
/// ```css
/// .my-element {
///     transition: background 0.3s 0.1s ease;
///     -webkit-transition: background 0.3s 0.1s ease;
///     -moz-transition: background 0.3s 0.1s ease;
///     -o-transition: background 0.3s 0.1s ease;
/// }
/// ```
///
/// @content Additional styles specific to the caller.
///
/// @group   helpers
/// @author  Ryuu Mitsuki `<github@mitsuki31>`
/// @since   0.1.0
///
@mixin mtransition($property: all, $durations,
                  $timing: linear, $vendors: global.$vendor-prefixes) {
    // Check whether the caller is have parent rules,
    // i.e., not being called from the outside.
    @if & {
        transition: $property $durations $timing;
        
        // Use vendor prefixes from global to define transition style
        // for old browsers
        @each $pre in $vendors {
            #{$pre}-transition: $property $durations $timing;
        }
        
        @content;
    }
}

/// This mixin provides a convenient way to apply transitions to all specified properties.  
/// For more detailed about the arguments, consider refer to `mtransition` mixin.
///
/// @param {List[*]} $args
///     List containing transition properties.
///
/// @example - scss
///   $foo-transition: width 0.5s 0.15s ease-in-out;
///   .foo {
///       @include mtransition-all($foo-transition);
///   }
///
/// @require {variable} vendor-prefixes
/// @require {mixin} mtransition
/// @output  Sets the `transition` properties with vendor prefixes.
///
/// @group   helpers
/// @author  Ryuu Mitsuki `<github@mitsuki31>`
/// @since   0.1.0
///
@mixin mtransition-all($args) {
    @include mtransition(
        $property: nth($args, 1),
        $durations: nth($args, 2),
        $timing: nth($args, 3),
        $vendors: if(length($args) == 4,
            nth($args, 4), global.$vendor-prefixes)
    );
}

/// Applies `transform` property and its vendor-prefixed versions.
///
/// This mixin applies the `transform` property and its vendor-prefixed versions
/// for compatibility across different browsers. It allows developers to define
/// custom transformation functions or values.
///
/// @param {List[String] | String} $args [none]
///     The transformation properties value or function to apply. Default is `none`.
/// @param {List[String]} $vendors [$vendor-prefixes]
///     A list of vendor prefixes for compatibility.
///
/// @example - scss
///   div {
///       @include mtransform(rotateX(35deg) rotateY(35deg));
///   }
///
/// @require {variable} vendor-prefixes
/// @output  Sets the `transform` properties with vendor prefixes.
/// ```css
/// div {
///     transform: rotateX(35deg) rotateY(35deg);
///     -webkit-transform: rotateX(35deg) rotateY(35deg);
///     -moz-transform: rotateX(35deg) rotateY(35deg);
///     -o-transform: rotateX(35deg) rotateY(35deg);
/// }
/// ```
///
/// @group   helpers
/// @author  Ryuu Mitsuki `<github@mitsuki31>`
/// @since   0.1.0
///
@mixin mtransform($args: none, $vendors: global.$vendor-prefixes) {
    // Check whether the caller is have parent rules
    if & {
        transform: $args;
        
        // Define transform properties for old browsers
        @each $pre in $vendors {
            #{$pre}-transform: $args;
        }
    }
}
